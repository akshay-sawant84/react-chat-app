{"version":3,"sources":["Chat.js","App.js","reportWebVitals.js","index.js"],"names":["Chat","socket","username","room","useState","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","a","messageData","author","message","time","Date","now","toLocaleString","hour","minute","hour12","emit","list","useEffect","on","data","className","map","messageContent","id","type","value","placeholder","onChange","event","target","onKeyPress","key","onClick","io","connect","App","setUsername","setRoom","showChat","setShowChat","user","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRA6EeA,MA1Ef,YAA2C,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,KAChC,EAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAW,uCAAG,4BAAAC,EAAA,yDACK,KAAnBL,EADc,uBAEVM,EAAc,CAClBR,KAAMA,EACNS,OAAQV,EACRW,QAASR,EACTS,KAAM,IAAIC,KAAKA,KAAKC,OAAOC,eAAe,QAAS,CACjDC,KAAM,UACNC,OAAQ,UACRC,QAAQ,KATI,SAaVnB,EAAOoB,KAAK,eAAgBV,GAblB,OAchBH,GAAe,SAACc,GAAD,4BAAcA,GAAd,CAAoBX,OACnCL,EAAkB,IAfF,2CAAH,qDAyBjB,OANAiB,qBAAU,WACRtB,EAAOuB,GAAG,mBAAmB,SAACC,GAC5BjB,GAAe,SAACc,GAAD,4BAAcA,GAAd,CAAoBG,YAEpC,CAACxB,IAGF,sBAAKyB,UAAU,cAAf,UACE,qBAAKA,UAAU,cAAf,SACE,4CAEF,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,CAAgBA,UAAU,oBAA1B,SACGnB,EAAYoB,KAAI,SAACC,GAChB,OACE,qBACEF,UAAU,UACVG,GAAI3B,IAAa0B,EAAehB,OAAS,MAAQ,QAFnD,SAIE,gCACE,qBAAKc,UAAU,kBAAf,SACE,4BAAIE,EAAef,YAErB,sBAAKa,UAAU,eAAf,UACE,mBAAGG,GAAG,OAAN,SAAcD,EAAed,OAC7B,mBAAGe,GAAG,SAAN,SAAgBD,EAAehB,wBAQ7C,sBAAKc,UAAU,cAAf,UACE,uBACEI,KAAK,OACLC,MAAO1B,EACP2B,YAAY,SACZC,SAAU,SAACC,GACT5B,EAAkB4B,EAAMC,OAAOJ,QAEjCK,WAAY,SAACF,GACG,UAAdA,EAAMG,KAAmB5B,OAG7B,wBAAQ6B,QAAS7B,EAAjB,2BClEFR,EAASsC,IAAGC,QAAQ,8CAgDXC,MA9Cf,WACE,MAAgCrC,mBAAS,IAAzC,mBAAOF,EAAP,KAAiBwC,EAAjB,KACA,EAAwBtC,mBAAS,IAAjC,mBAAOD,EAAP,KAAawC,EAAb,KACA,EAAgCvC,oBAAS,GAAzC,mBAAOwC,EAAP,KAAiBC,EAAjB,KAeA,OACE,qBAAKnB,UAAU,MAAf,SACIkB,EAoBA,cAAC,EAAD,CAAM3C,OAAQA,EAAQC,SAAUA,EAAUC,KAAMA,IAnBhD,sBAAKuB,UAAU,oBAAf,UACE,6CACA,uBACEI,KAAK,OACLE,YAAY,UACZC,SAAU,SAACC,GACTQ,EAAYR,EAAMC,OAAOJ,UAG7B,uBACED,KAAK,OACLE,YAAY,aACZC,SAAU,SAACC,GACTS,EAAQT,EAAMC,OAAOJ,UAGzB,wBAAQO,QAhCC,WACf,GAAiB,KAAbpC,GAA4B,KAATC,EAAa,CAClC,IAAMsB,EAAO,CACXtB,KAAMA,EACN2C,KAAM5C,GAERD,EAAOoB,KAAK,YAAaI,GACzBoB,GAAY,QAEZE,MAAM,6BAuBF,+BChCKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3b935ef9.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\n\r\nfunction Chat({ socket, username, room }) {\r\n  const [currentMessage, setCurrentMessage] = useState(\"\");\r\n  const [messageList, setMessageList] = useState([]);\r\n\r\n  const sendMessage = async () => {\r\n    if (currentMessage !== \"\") {\r\n      const messageData = {\r\n        room: room,\r\n        author: username,\r\n        message: currentMessage,\r\n        time: new Date(Date.now()).toLocaleString(\"en-US\", {\r\n          hour: \"numeric\",\r\n          minute: \"numeric\",\r\n          hour12: true,\r\n        }),\r\n      };\r\n\r\n      await socket.emit(\"send_message\", messageData);\r\n      setMessageList((list) => [...list, messageData]);\r\n      setCurrentMessage(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket.on(\"receive_message\", (data) => {\r\n      setMessageList((list) => [...list, data]);\r\n    });\r\n  }, [socket]);\r\n\r\n  return (\r\n    <div className=\"chat-window\">\r\n      <div className=\"chat-header\">\r\n        <p>Live Chat</p>\r\n      </div>\r\n      <div className=\"chat-body\">\r\n        <ScrollToBottom className=\"message-container\">\r\n          {messageList.map((messageContent) => {\r\n            return (\r\n              <div\r\n                className=\"message\"\r\n                id={username === messageContent.author ? \"you\" : \"other\"}\r\n              >\r\n                <div>\r\n                  <div className=\"message-content\">\r\n                    <p>{messageContent.message}</p>\r\n                  </div>\r\n                  <div className=\"message-meta\">\r\n                    <p id=\"time\">{messageContent.time}</p>\r\n                    <p id=\"author\">{messageContent.author}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </ScrollToBottom>\r\n      </div>\r\n      <div className=\"chat-footer\">\r\n        <input\r\n          type=\"text\"\r\n          value={currentMessage}\r\n          placeholder=\"Hey...\"\r\n          onChange={(event) => {\r\n            setCurrentMessage(event.target.value);\r\n          }}\r\n          onKeyPress={(event) => {\r\n            event.key === \"Enter\" && sendMessage();\r\n          }}\r\n        />\r\n        <button onClick={sendMessage}>&#9658;</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import \"./App.css\";\nimport io from \"socket.io-client\";\nimport { useState } from \"react\";\nimport Chat from \"./Chat\";\n\nconst socket = io.connect(\"https://rjs-socket-chat-app.herokuapp.com/\");\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [showChat, setShowChat] = useState(false);\n\n  const joinRoom = () => {\n    if (username !== \"\" && room !== \"\") {\n      const data = {\n        room: room,\n        user: username,\n      };\n      socket.emit(\"join_room\", data);\n      setShowChat(true);\n    } else {\n      alert(\"Please enter both fields\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {!showChat ? (\n        <div className=\"joinChatContainer\">\n          <h3>Join A Chat</h3>\n          <input\n            type=\"text\"\n            placeholder=\"John...\"\n            onChange={(event) => {\n              setUsername(event.target.value);\n            }}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Room ID...\"\n            onChange={(event) => {\n              setRoom(event.target.value);\n            }}\n          />\n          <button onClick={joinRoom}>Join A Room</button>\n        </div>\n      ) : (\n        <Chat socket={socket} username={username} room={room} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}